<!DOCTYPE html>
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">

    
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <title>OpenLayers Editor</title>
	
	<link href="http://netdna.bootstrapcdn.com/twitter-bootstrap/2.3.2/css/bootstrap-combined.no-icons.min.css" rel="stylesheet">
	<link href="http://netdna.bootstrapcdn.com/font-awesome/3.2.1/css/font-awesome.min.css" rel="stylesheet">
		
	<style type="text/css">
        #controlToggle li {
            list-style: none;
        }
    </style>
	
	<script src="http://maps.google.com/maps/api/js?v=3&amp;sensor=false"></script>
	<script src="./features/OpenLayers.js"></script>
	
	<script src="http://code.jquery.com/jquery-1.9.1.min.js"></script>
	<script src="http://netdna.bootstrapcdn.com/twitter-bootstrap/2.3.2/js/bootstrap.min.js"></script>
	
	
	
    <script type="text/javascript">
		OpenLayers.ProxyHost = "http://localhost:8080/";
        var map, vectors, formats, controls, snap;
		
        function updateFormats() {
            var in_options = {
                'internalProjection': map.baseLayer.projection,
                'externalProjection': new OpenLayers.Projection(OpenLayers.Util.getElement("inproj").value)
            };   
            var out_options = {
                'internalProjection': map.baseLayer.projection,
                'externalProjection': new OpenLayers.Projection(OpenLayers.Util.getElement("outproj").value)
            };
            var gmlOptions = {
                featureType: "feature",
                featureNS: "http://example.com/feature"
            };
            var gmlOptionsIn = OpenLayers.Util.extend(
                OpenLayers.Util.extend({}, gmlOptions),
                in_options
            );
            var gmlOptionsOut = OpenLayers.Util.extend(
                OpenLayers.Util.extend({}, gmlOptions),
                out_options
            );
            var kmlOptionsIn = OpenLayers.Util.extend(
                {extractStyles: true}, in_options);
            formats = {
              'in': {
                wkt: new OpenLayers.Format.WKT(in_options),
                geojson: new OpenLayers.Format.GeoJSON(in_options),
                georss: new OpenLayers.Format.GeoRSS(in_options),
                gml2: new OpenLayers.Format.GML.v2(gmlOptionsIn),
                gml3: new OpenLayers.Format.GML.v3(gmlOptionsIn),
                kml: new OpenLayers.Format.KML(kmlOptionsIn),
                atom: new OpenLayers.Format.Atom(in_options),
                gpx: new OpenLayers.Format.GPX(in_options),
                encoded_polyline: new OpenLayers.Format.EncodedPolyline(in_options)
              },
              'out': {
                wkt: new OpenLayers.Format.WKT(out_options),
                geojson: new OpenLayers.Format.GeoJSON(out_options),
                georss: new OpenLayers.Format.GeoRSS(out_options),
                gml2: new OpenLayers.Format.GML.v2(gmlOptionsOut),
                gml3: new OpenLayers.Format.GML.v3(gmlOptionsOut),
                kml: new OpenLayers.Format.KML(out_options),
                atom: new OpenLayers.Format.Atom(out_options),
                gpx: new OpenLayers.Format.GPX(out_options),
                encoded_polyline: new OpenLayers.Format.EncodedPolyline(out_options)
              }
            };
        }
		
        function init(){
			
            // allow testing of specific renderers via "?renderer=Canvas", etc
            var renderer = OpenLayers.Util.getParameters(window.location.href).renderer;
            renderer = (renderer) ? [renderer] : OpenLayers.Layer.Vector.prototype.renderers;
			vectors=new OpenLayers.Layer.Vector("WFS");
					
			map = new OpenLayers.Map({
				div: "map",
				layers: [
					new OpenLayers.Layer.OSM(),
					new OpenLayers.Layer.Google("Google Streets", {visibility: false}),
					// the SATELLITE layer has all 22 zoom level, so we add it first to
					// become the internal base layer that determines the zoom levels of the
					// map.
					new OpenLayers.Layer.Google(
						"Google Satellite",
						{type: google.maps.MapTypeId.SATELLITE, numZoomLevels: 22}
					),
					new OpenLayers.Layer.Google(
						"Google Physical",
						{type: google.maps.MapTypeId.TERRAIN, visibility: false}
					),
					new OpenLayers.Layer.Google(
						"Google Streets", // the default
						{numZoomLevels: 22, visibility: false}
					),
					new OpenLayers.Layer.Google(
						"Google Hybrid",
						{type: google.maps.MapTypeId.HYBRID, numZoomLevels: 22, visibility: false}
					),
					new OpenLayers.Layer("Blank",{isBaseLayer: true}),
					//world,
					vectors
				],
				center: new OpenLayers.LonLat(0, 0),
				zoom: 6,
				numZoomLevels: 60
			});
			

            OpenLayers.Feature.Vector.style['default']['strokeWidth'] = '2';
			
			//map.addLayer(vectors);
            //map.addLayers([wms, vectors]);
            map.addControl(new OpenLayers.Control.LayerSwitcher());
            map.addControl(new OpenLayers.Control.MousePosition());
			map.addControl(new OpenLayers.Control.Navigation());
            map.zoomToMaxExtent();
			
            map.addControl(new OpenLayers.Control.EditingToolbar(vectors));
            var options = {
                hover: true,
                onSelect: serialize
            };
            //var select = new OpenLayers.Control.SelectFeature(vectors, options);
            //map.addControl(select);
            //select.activate();
            updateFormats();
            
            // add file selector
            //document.getElementById('files').addEventListener('change', handleFileSelect, false);
			
			// configure the snapping agent
            snap = new OpenLayers.Control.Snapping({layer: vectors});
            map.addControl(snap);
            snap.activate();
			// add behavior to snap elements
            var snapCheck = document.getElementById("snap_toggle");
            snapCheck.checked = true;
            snapCheck.onclick = function() {
                if(snapCheck.checked) {
                    snap.activate();
                } else {
                    snap.deactivate();
                }
            };
			
	    // selection
	    vectors.events.on({
		    'featureselected': function(feature) {
			    document.getElementById('counter').innerHTML = this.selectedFeatures.length;
		    },
		    'featureunselected': function(feature) {
			    document.getElementById('counter').innerHTML = this.selectedFeatures.length;
		    }
	    });
			
			
            if (console && console.log) {
                function report(event) {
                    console.log(event.type, event.feature ? event.feature.id : event.components);
                };
                vectors.events.on({
                    "beforefeaturemodified": report,
                    "featuremodified": report,
                    "afterfeaturemodified": report,
                    "vertexmodified": report,
                    "sketchmodified": report,
                    "sketchstarted": report,
                    "sketchcomplete": report,
					"featureselected": report,
					"featureunselected": report
                });
            }
            controls = {
                point: new OpenLayers.Control.DrawFeature(vectors,
                            OpenLayers.Handler.Point),
                line: new OpenLayers.Control.DrawFeature(vectors,
                            OpenLayers.Handler.Path),
                polygon: new OpenLayers.Control.DrawFeature(vectors,
                            OpenLayers.Handler.Polygon),
                regular: new OpenLayers.Control.DrawFeature(vectors,
                            OpenLayers.Handler.RegularPolygon,
                            {handlerOptions: {sides: 5}}),
				modify: new OpenLayers.Control.ModifyFeature(vectors),
                select: new OpenLayers.Control.SelectFeature(
                    vectors,
                    {
                        clickout: false, toggle: false,
                        multiple: false, hover: false,
                        toggleKey: "ctrlKey", // ctrl key removes from selection
                        multipleKey: "shiftKey", // shift key adds to selection
                        box: true
                    }
                ),
                selecthover: new OpenLayers.Control.SelectFeature(
                    vectors,
                    {
                        multiple: false, hover: true,
                        toggleKey: "ctrlKey", // ctrl key removes from selection
                        multipleKey: "shiftKey" // shift key adds to selection
                    }
                )
            };
            
            for(var key in controls) {
                map.addControl(controls[key]);
            }
            
            map.setCenter(new OpenLayers.LonLat(0, 0), 3);
            document.getElementById('noneToggle').checked = true;
        }
        
        function update() {
            // reset modification mode
            controls.modify.mode = OpenLayers.Control.ModifyFeature.RESHAPE;
            var rotate = document.getElementById("rotate").checked;
            if(rotate) {
                controls.modify.mode |= OpenLayers.Control.ModifyFeature.ROTATE;
            }
            var resize = document.getElementById("resize").checked;
            if(resize) {
                controls.modify.mode |= OpenLayers.Control.ModifyFeature.RESIZE;
                var keepAspectRatio = document.getElementById("keepAspectRatio").checked;
                if (keepAspectRatio) {
                    controls.modify.mode &= ~OpenLayers.Control.ModifyFeature.RESHAPE;
                }
            }
            var drag = document.getElementById("drag").checked;
            if(drag) {
                controls.modify.mode |= OpenLayers.Control.ModifyFeature.DRAG;
            }
            if (rotate || drag) {
                controls.modify.mode &= ~OpenLayers.Control.ModifyFeature.RESHAPE;
            }
            controls.modify.createVertices = document.getElementById("createVertices").checked;
            var sides = parseInt(document.getElementById("sides").value);
            sides = Math.max(3, isNaN(sides) ? 0 : sides);
            controls.regular.handler.sides = sides;
            var irregular =  document.getElementById("irregular").checked;
            controls.regular.handler.irregular = irregular;
        }

        function toggleControl(element) {
            for(key in controls) {
                var control = controls[key];
                if(element.value == key && element.checked) {
                    control.activate();
                } else {
                    control.deactivate();
                }
            }
        }
		
		
		function removeSelected(){
			vectors.removeFeatures(
				vectors.selectedFeatures,
				{
					silent: true
				}
			);
		}
		
	function convertSelectedToPolygon(){
		var features=vectors.selectedFeatures;
		var ring = convertToRing(features,new OpenLayers.Geometry.LinearRing());
		polygonFeature = new OpenLayers.Feature.Vector(
			new OpenLayers.Geometry.Polygon([ring]), null, null); //site_style
		vectors.addFeatures([polygonFeature]);
	}
		
	function convertToRing(features, ring){
		for(var fid in features){
			if (features[fid] instanceof OpenLayers.Geometry.Point){
				ring.addComponent(features[fid].clone());
			} else if (features[fid].geometry instanceof OpenLayers.Geometry.Point){
				ring.addComponent(features[fid].geometry.clone());
			} else if (features[fid].geometry instanceof OpenLayers.Geometry.Collection){
				ring=convertToRing(features[fid].geometry.components,ring);
			} else {
				ring=convertToRing(features[fid].components,ring);
			}
		}
		return ring;
	}
	
	function convertSelectedToPoints(){
		var features=vectors.selectedFeatures;
		var points=convertToPoints(features);
	}
		
	function convertToPoints(features){
		for(var fid in features){
			if (features[fid] instanceof OpenLayers.Geometry.Point){
				vectors.addFeatures([new OpenLayers.Feature.Vector(new OpenLayers.Geometry.Point(features[fid].x,features[fid].y))]);
			} else if (features[fid].geometry instanceof OpenLayers.Geometry.Point){
				vectors.addFeatures([new OpenLayers.Feature.Vector(new OpenLayers.Geometry.Point(features[fid].geometry.clone()))]); //TODO check
			} else if (features[fid].geometry instanceof OpenLayers.Geometry.Collection){
				convertToPoints(features[fid].geometry.components);
			} else {
				convertToPoints(features[fid].components);
			}
		}
	}
	
/////////////////////////////////////////////////////CHECKME
	function convertSelectedToPolygon2(){
		var selectedFeatures=vectors.selectedFeatures;
		var points=convertToPoints2(selectedFeatures);
		//var rings[];
		var rings =new Array();
		for (var i=0, l=points.length; i<l; i++){
			rings[i] = convertToRing(points[i],new OpenLayers.Geometry.LinearRing());
			polygonFeature = new OpenLayers.Feature.Vector(new OpenLayers.Geometry.Polygon([rings[i]]), null, null); //site_style
			vectors.addFeatures([polygonFeature]);
		}
		vectors.removeFeatures(vectors.selectedFeatures);
	}

	function convertToPoints2(features){
		//var points[][];
		var points =new Array();
		var i=0;
		for(var fid in features){
			var j=0;
			points[i]=new Array();
			if (features[fid].geometry instanceof OpenLayers.Geometry.Collection){
				for (var comp in features[fid].geometry.components){
					j=j+1;
					var point=convertFeatureToPoint(features[fid].geometry.components[comp]);
					if (!point){
						// comp is not a Point geometry
						merge(points,convertToPoints2(features[fid].geometry.components[comp]));
					} else {
						points[i][j]=point;
					}
				}
//			} else if (features[fid].components instanceof OpenLayers.Geometry.Collection){
//			//	points[i++]=convertToPoints2(features[fid]);
//				//points[i++]=convertFeatureToPoint(features[fid].components);
//				for (var comp in features[fid].components){
//					j=j+1;
//					var point=convertFeatureToPoint(features[fid].geometry.components[comp]);
//					if (!point){
//						// comp is not a Point geometry
//						merge(points,convertToPoints2(features[fid].geometry.components[comp]));
//					} else {
//						points[i][j]=point;
//					}
//				}
			}
			i=i+1;
		}
		return points;
	}
	
	function merge(matrix1, matrix2){
		var l1=matrix1.length;
		for (var i=0, l2=matrix2.length; i<l2; i++){
			matrix1[i+l1]=matrix2[i];
		}
	}
	
	function convertFeatureToPoint(feature){
		var point;
		var i=0;
		if (feature instanceof OpenLayers.Geometry.Point){
			point=new OpenLayers.Geometry.Point(feature.x,feature.y);
		} else if (feature.geometry instanceof OpenLayers.Geometry.Point){
			point=feature.geometry.clone(); //TODO check
		} else 
			return null;
		return point;
	}
	
/////////////////////////////////////////////////////CHECKME
	
		
	function addPointFeature(pointGeom){
		polygonFeature = new OpenLayers.Feature.Vector(
			new OpenLayers.Geometry.Point(pointGeom), null, null); //site_style
		vectors.addFeatures([polygonFeature]);
	}
		
		
        function serialize(feature) {
            var type = document.getElementById("formatType").value;
            // second argument for pretty printing (geojson only)
            var pretty = document.getElementById("prettyPrint").checked;
            var str = formats['out'][type].write(feature, pretty);
            // not a good idea in general, just for this demo
            str = str.replace(/,/g, ', ');
            document.getElementById('output').value = str;
        }
		
	function serializeSelected(feature) {
		serialize(vectors.selectedFeatures);
        }

        function deserialize() {
            var element = document.getElementById('text');
            var type = document.getElementById("formatType").value;
            var features = formats['in'][type].read(element.value);
            var bounds;
            if(features) {
                if(features.constructor != Array) {
                    features = [features];
                }
                for(var i=0; i<features.length; ++i) {
                    if (!bounds) {
                        bounds = features[i].geometry.getBounds();
                    } else {
                        bounds.extend(features[i].geometry.getBounds());
                    }

                }
                vectors.addFeatures(features);
                map.zoomToExtent(bounds);
                var plural = (features.length > 1) ? 's' : '';
                element.value = features.length + ' feature' + plural + ' added';
            } else {
                element.value = 'Bad input ' + type;
            }
        }
        
/////////////////////////////////////////////////////CHECKME
        function handleFileSelect(evt) {
	    var files = evt.target.files; // FileList object

	    // Loop through the FileList and render image files as thumbnails.
	    for (var i = 0, f; f = files[i]; i++) {

	      // Only process image files.
	      var type = document.getElementById("formatType").value;
	      //if (!f.type.match(type)) {
		//continue;
	      //}

	      var reader = new FileReader();

	      // Closure to capture the file information.
	      reader.onload = (function(theFile) {
		    return function(e) {
		      // append feature
		      var features = formats['in'][type].read(e.target.result);
		      var bounds;
		      if(features) {
			  if(features.constructor != Array) {
			      features = [features];
			  }
			  for(var i=0; i<features.length; ++i) {
			      if (!bounds) {
				  bounds = features[i].geometry.getBounds();
			      } else {
				  bounds.extend(features[i].geometry.getBounds());
			      }

			  }
			  vectors.addFeatures(features);
			  //map.zoomToExtent(bounds);
			  var plural = (features.length > 1) ? 's' : '';
			  element.value = features.length + ' feature' + plural + ' added';
		      } else {
			  element.value = 'Bad input ' + type;
		      }
		    };
	      })(f);

	      // Read in the image file as a data URL.
	      reader.readAsText(f, 'UTF-8') 
	    }
	}
	
        function loadFile(file) {
            var input = $( "input:file" );
            var type = document.getElementById("formatType").value;
            var features = formats['in'][type].read(input.value);
            var bounds;
            if(features) {
                if(features.constructor != Array) {
                    features = [features];
                }
                for(var i=0; i<features.length; ++i) {
                    if (!bounds) {
                        bounds = features[i].geometry.getBounds();
                    } else {
                        bounds.extend(features[i].geometry.getBounds());
                    }

                }
                vectors.addFeatures(features);
                //map.zoomToExtent(bounds);
                var plural = (features.length > 1) ? 's' : '';
                element.value = features.length + ' feature' + plural + ' added';
            } else {
                element.value = 'Bad input ' + type;
            }
        }
/////////////////////////////////////////////////////CHECKME
		
		//////////////// SIMPLIFY
    
		// Control behaviour
		var lastValue = 0.01;
		function simplify(){
			var min = 0;
			var max = 1;
			var givenVal= parseFloat(document.getElementById('tolerance').value);
			var useVal = lastValue;
			if (!isNaN(givenVal)) {
				if (givenVal >= min && givenVal <= max) {
					useVal = givenVal;
				} else {
					useVal = (givenVal < min) ? min : max;
				}
			}
			for(var i=0; i<vectors.features.length; ++i) {
				if (vectors.features[i].geometry instanceof OpenLayers.Geometry.LineString){
					var newLineString=vectors.features[i].geometry.simplify(useVal);
					var originalVerticesCnt = vectors.features[i].geometry.components.length;
					var simplifiedVerticesCnt = newLineString.getVertices().length;
					vectors.removeFeatures(vectors.features[i]);
					vectors.addFeatures([new OpenLayers.Feature.Vector(newLineString)]);
					
					//var infotxt = '<ul><li>Original LineString: <strong>';
					//infotxt +=  originalVerticesCnt + ' vertices</strong></li>';
					//infotxt += ' <li>Simplified geometry: <strong>' + simplifiedVerticesCnt + ' vertices</strong></li>';
					//infotxt += ' <li>Decreased by <strong>' + (((originalVerticesCnt-simplifiedVerticesCnt)/originalVerticesCnt)*100).toFixed(2) + ' per cent</strong></li></ul>';
					//document.getElementById('info').innerHTML = infotxt;
				}
			}
			lastValue = useVal;
			document.getElementById('tolerance').value = lastValue;
		};
		
		
		///////////////SIMPLIFY ANIMATED
		
		// document.getElementById('simplify').onclick = simplify;
		// simplify();
		
		var animationInterval;
		function animationHandler(){
			if (document.getElementById('animation').value === 'Start animation') {
				document.getElementById('simplify').disabled = true;
				document.getElementById('animation').value = "Stop animation";
				animationInterval = window.setInterval(function(){
					var tolerance = parseFloat(document.getElementById('tolerance').value);
					if (tolerance < 1) {
						tolerance+=0.01;
					} else {
						tolerance = 0.01;
					}
					document.getElementById('tolerance').value = tolerance.toFixed(2);
					simplify();
				}, 2000);
				simplify();
			} else {
				if (animationInterval) {
					window.clearInterval(animationInterval);
				}
				document.getElementById('simplify').disabled = false;
				document.getElementById('animation').value = "Start animation";
			}
		};
		
		/////////////////////// LABELs
		function label(layer, features){
			for(var fid=0; fid<features.length; ++fid) {
				layer.drawFeature(features[fid],{
						label:String(fid),
						labelOffsetX: "10",
						labelOffsetY: "10",
						fontColor: "red",
						fontSize: 12,
						fontFamily: "Arial",
						fontWeight: "bold",
						labelAlign: "lt"
					}
				);
			}
		};
		
		function labelize(){
			label(vectors, vectors.selectedFeatures);
		};
		
    
		/*
		$(document).ready(function(){
			init();
			
			var map = $("#map");
			map.css("height", $("#controls").height());
			
			
		});
		*/
	
	
	</script>
	
  
  
  <body onload="init();">
    
	<div class="container">
		<div class="row-fluid">
			<div class="span12">
				<h1 id="title">OpenLayers Editor</h1>
				<div id="shortdesc">A set of simple tools to import export and modify features on a map.</div>	
			</div>
		</div>
		<div class="row-fluid">
			<div class="span8">
				<div id="map" style='width: 100%; height:500px'></div>
			</div>
			<div class="span4">
				 <div id="controls">  
					<div class="accordion-group">
						<div class="accordion-heading">
						  <a class="accordion-toggle" data-toggle="collapse" href="#collapseOne"><i class="icon-save"></i> Import/Export</a>
						</div>
						<div id="collapseOne" class="accordion-body collapse">
							<div class="accordion-inner">
								<div id="input">
											<p>Use the drop-down below to select the input/output format
											for vector features.  New features can be added by using the drawing
											tools above or by pasting their text representation below.</p>
											<label for="formatType">Format</label>
											<select name="formatType" id="formatType">
												<option value="geojson">GeoJSON</option>
												<option value="atom">Atom</option>
												<option value="kml">KML</option>
												<option value="georss">GeoRSS</option>
												<option value="gml2">GML (v2)</option>
												<option value="gml3">GML (v3)</option>
												<option value="wkt">Well-Known Text (WKT)</option>
												<option value="gpx" selected="selected">GPX</option>
												<option value="encoded_polyline">Encoded Polyline</option>
											</select>
											&nbsp;
											<label for="prettyPrint">Pretty print</label>
											<input id="prettyPrint" type="checkbox" name="prettyPrint" value="1">
											<br>
											Input Projection: <select id="inproj" onchange="updateFormats()">
											  <option value="EPSG:4326" selected="selected">EPSG:4326</option>
											  <option value="EPSG:900913">Spherical Mercator</option>
											</select> <br> 
											Output Projection: <select id="outproj" onchange="updateFormats()">
											  <option value="EPSG:4326" selected="selected">EPSG:4326</option>
											  <option value="EPSG:900913">Spherical Mercator</option>
											</select> 
											<br> 
											<textarea id="text" style='width: 100%; height: 300px;'></textarea>
											<br>
											<input type="button" value="add feature" onclick="deserialize();">
											<!--input type="file" value="load file" onclick="loadFile();"-->
											<!--input type="file" id="files" name="files[]" multiple -->
											<!--output id="list"></output-->
										</div>	<br /><br />
										<div id="info">
											<p>Use the tools to draw new polygons, lines, and points.
											After drawing some new features, hover over a feature to see the
											serialized version below.</p>
											<textarea id="output" style='width: 100%; height: 300px;'></textarea>
										</div>

								</div>
							</div>
						</div>
						
						
						<div class="accordion" id="accordion2">
						<div class="accordion-group">
							<div class="accordion-heading">
								<a class="accordion-toggle" data-toggle="collapse" data-parent="#accordion2" href="#editor"><i class="icon-cog"></i>Editor</a>
							</div>
							<div id="editor" class="accordion-body collapse">
								<div class="accordion-inner">
									<ul id="controlToggle">
										<!--
										<li>
											<label for="snap_toggle"></label>
											<input type="checkbox" name="snapping" id="snap_toggle" checked="checked">
										</li>
										-->
										<li>
											<label class="radio">
												<input type="radio" name="type" value="none" id="noneToggle" onclick="toggleControl(this);" checked="checked">navigate
											</label>
										</li>
										<li>
											<label class="radio">
												<input type="radio" name="type" value="point" id="pointToggle" onclick="toggleControl(this);">draw point
											</label>
										</li>
										<li>
											<label class="radio">
												<input type="radio" name="type" value="line" id="lineToggle" onclick="toggleControl(this);">draw line
											</label>
										</li>
										<li>
											<label class="radio">
												<input type="radio" name="type" value="polygon" id="polygonToggle" onclick="toggleControl(this);">draw polygon
											</label>
										</li>
										
										<li>
											<label class="radio">
												<input type="radio" name="type" value="regular" id="regularToggle" onclick="toggleControl(this);">draw regular polygon
											</label>														
											<ul>
												<li>
													<input id="sides" type="text" placeholder="sides" size="2" maxlength="2" name="sides" onchange="update()">
												</li>
												<li>
													<label class="checkbox">
														<input type="checkbox" id="irregular" type="checkbox" name="irregular" onchange="update()"> Irregular
													</label>
												</li>
											</ul>
										</li>
										<li>
											<label class="radio">
												<input type="radio" name="type" value="modify" id="modifyToggle" onclick="toggleControl(this);">modify feature
											</label>
											<ul>
												<li>
													<label class="checkbox">
														<input type="checkbox" id="createVertices" type="checkbox" checked="" name="createVertices" onchange="update()">allow vertices creation
													</label>
												</li>
												<li>
													<label class="checkbox">
														<input id="rotate" type="checkbox" name="rotate" onchange="update()">allow rotation
													</label>
												</li>
												<li>
													<label class="checkbox">
														<input id="resize" type="checkbox" name="resize" onchange="update()">allow resizing
													</label>
													<ul>
														<li>
															<label class="checkbox">
																<input id="keepAspectRatio" type="checkbox" name="keepAspectRatio" onchange="update()" checked="checked">keep aspect ratio
															</label>
														</li>
													</ul>
												</li>
												<li>
													<label class="checkbox">
														<input id="drag" type="checkbox" name="drag" onchange="update()">allow dragging
													</label>
												</li>
											</ul>
										</li>
										<!--li>
											<input type="radio" name="type" value="selecthover" id="selecthoverToggle" onclick="toggleControl(this);">
											<label for="selecthoverToggle">Select features on hover</label>
										</li-->
										<li>
											<label class="radio">
												<input  type="radio" name="type" id="selectToggle" value="select" onclick="toggleControl(this);">select feature (<span id="counter">0</span> features selected)
											</label>
											<p>
												Use the shift key to select multiple features.  Use the ctrl key to
												toggle selection on features one at a time.  Note: the "clickout" option has no
												effect when "hover" is selected.
											</p>
											<ul>
												<li>
													<label class="checkbox">
														<input id="box" type="checkbox" name="box" checked="checked" onchange="update()">select features in a box
													</label>
												</li>
												<li>
													<label class="checkbox">
														<input id="clickout" type="checkbox" name="clickout" checked="checked" onchange="update()">click out to unselect features
													</label>
												</li>
											</ul>
											<button type="submit" class="btn" onclick="removeSelected();">Remove features</button>
											<button type="submit" class="btn" onclick="serializeSelected();"/>Dump features</button>
											<button type="submit" class="btn" onclick="convertSelectedToPolygon2();">Convert to polygon</button>
											<button type="submit" class="btn" onclick="convertSelectedToPoints();">Convert to points</button>
											<button type="submit" class="btn" onclick="labelize();">Label features</button>
										</li>
										<li>
											<div id="control-simplify">
												<label for="tolerance">Tolerance factor:</label>
												<input name="tolerance" id="tolerance" type="number" min="0" max="1" step="0.00001" value="0.001">
												<button type="submit" class="btn" id="simplify" onclick="simplify();">Simplify LineString</button>
												<button type="submit" class="btn" id="animation" onclick="animationHandler();">Start animation</button>
												<div id="info"></div>
											</div>
										</li>
									</ul>
								</div>
							</div>
							<div class="accordion-heading">
								<a class="accordion-toggle" data-toggle="collapse" data-parent="#accordion2" href="#global"><i class="icon-cog"></i>Global</a>
							</div>
							<div id="global" class="accordion-body collapse">
								<div class="accordion-inner">
									<label class="checkbox">
									  <input type="checkbox" name="snapping" id="snap_toggle" checked="checked"> Snap to points
									</label>
								</div>
							</div>
					</div>
				 
				 
				 
				 
				 
				 
				 
				 
					
				</div>
			</div>
		</div>
	
	</div>
	
	
	
	
	
	
	
	
	
	
	
    

   
    
  </body></html>